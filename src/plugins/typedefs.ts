import type { defaultGetCwd, esbuild, MaybePromise } from "../deps.ts"
import type { ImportMap } from "../importmap/typedefs.ts"
import type { RuntimePackage } from "../packageman/base.ts"
import type { entryPlugin } from "./filters/entry.ts"
import type { NpmAutoInstallCliConfig, npmPluginSetup, NpmPluginSetupConfig } from "./filters/npm.ts"
import type { resolverPlugin } from "./resolvers.ts"


/** a central enum containing the list of esbuild namespaces used by the plugins in this library. */
export const enum PLUGIN_NAMESPACE {
	RESOLVER_PIPELINE = "oazmi-resolver-pipeline",
	LOADER_HTTP = "oazmi-loader-http",
}

/** a list of default namespaces that esbuild uses for native/entry-point resolution. */
export const defaultEsbuildNamespaces = [undefined, "", "file"]

/** a list of all esbuild content type loaders. */
export const allEsbuildLoaders: Array<EsbuildLoaderType> = [
	"base64", "binary", "copy", "css", "dataurl",
	"default", "empty", "file", "js", "json",
	"jsx", "local-css", "text", "ts", "tsx",
]

/** an enum that represents special directories.
 * 
 * currently, it is only being used in {@link NpmPluginSetupConfig.nodeModulesDirs}, and {@link NpmAutoInstallCliConfig.dir}.
*/
export const enum DIRECTORY {
	/** represents your js-runtime's current working directory (acquired via {@link defaultGetCwd}). */
	CWD = 0,

	/** represents the `absWorkingDir` option provided to your esbuild build config.
	 * 
	 * note that in almost all cases, if esbuild's `absWorkingDir` option was not specified,
	 * then we fallback to the current working director (i.e. {@link DIRECTORY.CWD}).
	 * this includes the node package scanner function `validResolveDirFinder`
	 * (generated by {@link findResolveDirOfNpmPackageFactory}), inside of the npm-plugin ({@link npmPluginSetup}).
	*/
	ABS_WORKING_DIR = 1,
}

/** this is the common plugin data utilized by the resolvers in {@link resolverPlugin} esbuild-plugin. */
export interface CommonPluginData {
	/** specifies the current scope's import-map aliases.
	 * the keys of this object hold the aliased name of the import, while the values hold the absolute path of the referenced resource.
	 * 
	 * for further reading on import maps, see {@link ImportMap}.
	*/
	importMap?: ImportMap

	/** specifies the current scope's runtime package manager (such as deno, jsr, npm, node, etc...),
	 * so that the package's own import and export aliases can be resolved appropriately.
	*/
	runtimePackage?: RuntimePackage<any>

	/** you may control which resolvers to disable through the use of this property. */
	resolverConfig?: {
		/** enable or disable the initial `pluginData` injection (performed by the {@link entryPlugin}) for the current entity.
		 * setting this to `false` is needed when switching the scope to a new package,
		 * so that your current initial runtime-package and import-maps do not interfere/overwite the intended plugin data.
		 * (for instance, this will be needed when moving to a self-contained remote jsr-package scope, away from your filesystem).
		 * 
		 * @defaultValue `true` (enabled)
		*/
		useInitialPluginData?: boolean

		/** enable or disable import-map resolution for the current entity.
		 * 
		 * @defaultValue `true` (enabled)
		*/
		useImportMap?: boolean

		/** enable or disable runtime-package resolution (such as "deno.json") for the current entity.
		 * 
		 * @defaultValue `true` (enabled)
		*/
		useRuntimePackage?: boolean

		/** enable or disable `node_modules` file resolution for the current entity.
		 * 
		 * @defaultValue `true` (enabled)
		*/
		useNodeModules?: boolean

		/** enable or disable relative-path to absolute-path resolution for the current entity.
		 * 
		 * @defaultValue `true` (enabled)
		*/
		useRelativePath?: boolean
	}

	[capture_marker: symbol]: boolean
}

/** type alias for `esbuild.OnResolveArgs`, slightly tweaked for this library's internal use. */
export type OnResolveArgs = Omit<esbuild.OnResolveArgs, "pluginData"> & { pluginData?: CommonPluginData }

/** type alias for `esbuild.OnLoadArgs`, slightly tweaked for this library's internal use. */
export type OnLoadArgs = Omit<esbuild.OnLoadArgs, "pluginData"> & { pluginData?: CommonPluginData }

/** type alias for `esbuild.OnResolveResult`. */
export type OnResolveResult = esbuild.OnResolveResult

/** type alias for `esbuild.OnLoadResult`. */
export type OnLoadResult = esbuild.OnLoadResult

/** type alias for the callback function provided to `onResolve` the function (aka `esbuild.PluginBuild["onResolve"]`). */
export type OnResolveCallback = (args: OnResolveArgs) => MaybePromise<OnResolveResult | null | undefined>

/** type alias for the callback function provided to `OnLoadCallback` the function (aka `esbuild.PluginBuild["OnLoadCallback"]`). */
export type OnLoadCallback = (args: OnLoadArgs) => MaybePromise<OnLoadResult | null | undefined>

/** type alias for `esbuild.Plugin`. */
export type EsbuildPlugin = esbuild.Plugin

/** type alias for `esbuild.Plugin["setup"]`. */
export type EsbuildPluginSetup = esbuild.Plugin["setup"]

/** type alias for `esbuild.PluginBuild`. */
export type EsbuildPluginBuild = esbuild.PluginBuild

/** type alias for `esbuild.Loader`. */
export type EsbuildLoaderType = esbuild.Loader

/** a logging function that can be used as an alternative to the default `console.log` logger function. */
export type LoggerFunction = (...data: any[]) => void
